#!/bin/bash

# Tribenest deployment script
# Usage: ./tribenest [up|upgrade|down]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if .env file exists
check_env_file() {
    if [ ! -f ".env" ]; then
        print_error ".env file not found!"
        echo "Please create a .env file with the required environment variables."
        exit 1
    fi
}

# Function to validate required environment variables
validate_env_vars() {
    print_info "Validating environment variables..."

    # Load .env file
    if [ -f ".env" ]; then
        export $(cat .env | grep -v '^#' | xargs)
    fi

    # Define required environment variables
    required_vars=(
        "DATABASE_HOST"
        "DATABASE_PORT"
        "DATABASE_USER"
        "DATABASE_PASSWORD"
        "DATABASE_NAME"
        "JWT_SECRET"
        "ACCESSTOKENTTL"
        "ROOT_DOMAIN"
        "API_URL"
        "ADMIN_URL"
        "MINIO_ACCESS_KEY"
        "MINIO_SECRET_KEY"
        "MINIO_BUCKET"
        "MINIO_URL"
        "MINIO_REGION"
        "MINIO_BUCKET_URL"
        "REDIS_PASSWORD"
        "MINIO_ROOT_USER"
        "MINIO_ROOT_PASSWORD"
    )

    missing_vars=()

    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done

    if [ ${#missing_vars[@]} -ne 0 ]; then
        print_error "Missing required environment variables:"
        for var in "${missing_vars[@]}"; do
            echo "  - $var"
        done
        echo ""
        echo "Please add these variables to your .env file. Example:"
        echo "DATABASE_HOST=tribenest-postgres"
        echo "DATABASE_PORT=5432"
        echo "# ... add all missing variables"
        exit 1
    fi

    print_success "All required environment variables are present!"
}

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        print_error "Docker is not running or not accessible!"
        echo "Please start Docker and try again."
        exit 1
    fi
}

# Function to check if docker-compose is available
check_docker_compose() {
    if ! command -v docker-compose > /dev/null 2>&1; then
        print_error "docker-compose is not installed or not in PATH!"
        echo "Please install docker-compose and try again."
        exit 1
    fi
}

# Function for 'up' command
tribenest_up() {
    print_info "Starting Tribenest services..."

    check_env_file
    validate_env_vars
    check_docker
    check_docker_compose

    print_info "Starting docker-compose up..."
    docker-compose up -d

    print_success "Tribenest services started successfully!"
    print_info "You can check the status with: docker-compose ps"
}

# Function for 'upgrade' command
tribenest_upgrade() {
    print_info "Upgrading Tribenest services..."
    
    check_env_file
    validate_env_vars
    check_docker
    check_docker_compose

    print_info "Pulling latest images..."
    docker-compose pull

    print_info "Stopping current services..."
    docker-compose down

    print_info "Starting services with new images..."
    docker-compose up -d

    print_info "Cleaning up Docker..."
    docker system prune -f

    print_success "Tribenest services upgraded successfully!"
    print_info "You can check the status with: docker-compose ps"
}

# Function for 'down' command
tribenest_down() {
    print_info "Stopping Tribenest services..."

    check_docker
    check_docker_compose

    docker-compose down

    print_success "Tribenest services stopped successfully!"
}

# Function for 'setup-domain' command
tribenest_setup_domain() {
    print_info "Setting up domain with nginx..."

    # Check if domain and email arguments are provided
    if [ $# -ne 2 ]; then
        print_error "setup-domain requires exactly 2 arguments: domain and email"
        echo ""
        echo "Usage: $0 setup-domain <domain> <email>"
        echo "Example: $0 setup-domain yourdomain.com admin@yourdomain.com"
        exit 1
    fi

    DOMAIN=$1
    EMAIL=$2

    print_info "Domain: $DOMAIN"
    print_info "Email: $EMAIL"

    # Check if setup-nginx.sh exists
    if [ ! -f "setup-nginx.sh" ]; then
        print_error "setup-nginx.sh file not found!"
        echo "Please ensure setup-nginx.sh is in the current directory."
        exit 1
    fi

    # Run the setup-nginx.sh script with the provided arguments
    print_info "Running nginx setup script..."
    bash setup-nginx.sh "$DOMAIN" "$EMAIL"

    print_success "Domain setup completed successfully!"
}

# Function to show usage
show_usage() {
    echo "Tribenest Deployment Script"
    echo ""
    echo "Usage: $0 [COMMAND] [ARGUMENTS...]"
    echo ""
    echo "Commands:"
    echo "  up                    - Start Tribenest services"
    echo "  upgrade               - Upgrade Tribenest services (pull, stop, start, cleanup)"
    echo "  down                  - Stop Tribenest services"
    echo "  setup-domain <domain> <email> - Setup nginx with SSL for domain"
    echo ""
    echo "Examples:"
    echo "  $0 up"
    echo "  $0 upgrade"
    echo "  $0 down"
    echo "  $0 setup-domain yourdomain.com admin@yourdomain.com"
}

# Main script logic
case "${1:-}" in
    "up")
        tribenest_up
        ;;
    "upgrade")
        tribenest_upgrade
        ;;
    "down")
        tribenest_down
        ;;
    "setup-domain")
        # Shift to remove the command name and pass remaining arguments
        shift
        tribenest_setup_domain "$@"
        ;;
    *)
        show_usage
        exit 1
        ;;
esac